{"version":3,"sources":["components/Feedback/FeedbackStatistics.module.css","components/Feedback/FeedbackSection.module.css","components/Feedback/FeedbackOptions.module.css","components/Feedback/FeedbackSection.js","components/Feedback/FeedbackOptions.js","components/Notification.js","components/Feedback/FeedbackStatistics.js","App.js","index.js"],"names":["module","exports","FeedbackSection","children","className","s","feedback","FeedbackOptions","options","onLeaveFeedback","optionsBtn","Object","keys","map","option","type","name","onClick","Notification","StatisticsFeedback","good","neutral","bad","total","positivePercentage","statisticText","statisticList","statisticItem","App","state","incrementClick","e","target","setState","prevState","this","totalFeedback","positiveFeedbackPercentage","Math","round","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0IACAA,EAAOC,QAAU,CAAC,cAAgB,0CAA0C,cAAgB,4C,uBCA5FD,EAAOC,QAAU,CAAC,SAAW,oC,gBCA7BD,EAAOC,QAAU,CAAC,WAAa,sC,sMCUhBC,EATS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,0BAASC,UAAWC,IAAEC,SAAtB,UACE,uDACCH,M,iBCwBQI,EA3BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC5BC,EAAaC,OAAOC,KAAKJ,GAC/B,OACE,qBAAKJ,UAAWC,IAAEK,WAAlB,SACGA,EAAWG,KAAI,SAAAC,GAAM,OACpB,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAASR,EAJX,SAMGK,GAJIA,S,gBCPAI,EAHM,WACnB,OAAO,mDC0CMC,EAvCY,SAAC,GAMrB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,gCACE,mBAAGpB,UAAWC,IAAEoB,cAAhB,wBACCF,EAAQ,EACP,qCACE,qBAAInB,UAAWC,IAAEqB,cAAjB,UACE,qBAAItB,UAAWC,IAAEsB,cAAjB,kBAAsCP,KACtC,qBAAIhB,UAAWC,IAAEsB,cAAjB,qBAAyCN,KACzC,qBAAIjB,UAAWC,IAAEsB,cAAjB,iBAAqCL,QAGvC,+BACE,qBAAIlB,UAAWC,IAAEsB,cAAjB,mBAAuCJ,KACvC,qBAAInB,UAAWC,IAAEsB,cAAjB,+BACqBH,EADrB,aAMJ,cAAC,EAAD,QCxBFI,E,4MACJC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,eAAiB,SAAAC,GACf,IAAQf,EAASe,EAAEC,OAAXhB,KACR,EAAKiB,UAAS,SAAAC,GAAS,kCAClBA,GADkB,kBAEpBlB,EAAOkB,EAAUlB,GAAQ,Q,4CAI9B,WACE,MAA+BmB,KAAKN,MAA5BT,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACfQ,EAAmBK,KAAnBL,eAEFM,EAAgBhB,EAAOC,EAAUC,EACjCe,EAA6BC,KAAKC,MAAOnB,EAAOgB,EAAiB,KAEvE,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACE5B,QAAS2B,KAAKN,MACdpB,gBAAiBqB,IAEnB,cAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOa,EACPZ,mBAAoBa,W,GAjCZG,aAwCHZ,ICzCfa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b4cc2835.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticList\":\"FeedbackStatistics_statisticList__21PqF\",\"statisticText\":\"FeedbackStatistics_statisticText__2xj3g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback\":\"FeedbackSection_feedback__3YFIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionsBtn\":\"FeedbackOptions_optionsBtn__29pKH\"};","import s from './FeedbackSection.module.css';\r\n\r\nconst FeedbackSection = ({ children }) => {\r\n  return (\r\n    <section className={s.feedback}>\r\n      <h2>Please leave feedback</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default FeedbackSection;\r\n","import PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  const optionsBtn = Object.keys(options);\r\n  return (\r\n    <div className={s.optionsBtn}>\r\n      {optionsBtn.map(option => (\r\n        <button\r\n          type=\"button\"\r\n          key={option}\r\n          name={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.shape({\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n  }),\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","const Notification = () => {\r\n  return <p>No feedback given</p>;\r\n};\r\nexport default Notification;\r\n","import PropTypes from 'prop-types';\r\nimport s from './FeedbackStatistics.module.css';\r\nimport Notification from '../Notification';\r\n\r\nconst StatisticsFeedback = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <p className={s.statisticText}>Statistics</p>\r\n      {total > 0 ? (\r\n        <>\r\n          <ul className={s.statisticList}>\r\n            <li className={s.statisticItem}>Good:{good}</li>\r\n            <li className={s.statisticItem}>Neutral:{neutral}</li>\r\n            <li className={s.statisticItem}>Bad:{bad}</li>\r\n          </ul>\r\n\r\n          <ul>\r\n            <li className={s.statisticItem}>Total:{total}</li>\r\n            <li className={s.statisticItem}>\r\n              Positive feedback:{positivePercentage}%\r\n            </li>\r\n          </ul>\r\n        </>\r\n      ) : (\r\n        <Notification />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nStatisticsFeedback.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\nexport default StatisticsFeedback;\r\n","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport FeedbackSection from './components/Feedback/FeedbackSection';\r\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\r\nimport StatisticsFeedback from './components/Feedback/FeedbackStatistics';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  incrementClick = e => {\r\n    const { name } = e.target;\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      [name]: prevState[name] + 1,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const { incrementClick } = this;\r\n\r\n    const totalFeedback = good + neutral + bad;\r\n    const positiveFeedbackPercentage = Math.round((good / totalFeedback) * 100);\r\n\r\n    return (\r\n      <FeedbackSection>\r\n        <FeedbackOptions\r\n          options={this.state}\r\n          onLeaveFeedback={incrementClick}\r\n        />\r\n        <StatisticsFeedback\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={totalFeedback}\r\n          positivePercentage={positiveFeedbackPercentage}\r\n        />\r\n      </FeedbackSection>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}